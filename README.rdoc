= BallotBox

The BallotBox gem enables visitors to vote for and against voteable objects

== Install
  
  gem 'ballot_box'

  rails generate ballot_box:install
  
== Usage

Use middleware with options:

  # Initialize BallotBox and set its configurations.
  config.app_middleware.use BallotBox::Manager do |config|
    config.routes = { "/posts/votes" => "Post" }
  end
  
Set voteable model:

  class Post < ActiveRecord::Base
    ballot_box :counter_cache => true
    # ballot_box :counter_cache => :rating, :strategies => [:authenticated]
  end

View (just send post request to configure route):
  
  link_to 'Vote', "/posts/votes?id=#{@post.id}", :remote => true, :method => :post

== Strategies

Strategy - is no more a simple validation at the object vote.
Authenticated - check :voter attribute is not blank.

  module BallotBox
    module Strategies
      class Authenticated < Base
        validates_presence_of :voter
      end
    end
  end
  
Write your own strategies:

  class MyCustomStrategy < BallotBox::Strategies::Base
    validates_uniqueness_of :voter_id, :voter_type
  end

  class Post < ActiveRecord::Base
    ballot_box :strategies => [:authenticated, 'MyCustomStrategy']
  end

== Callbacks

Middleware callbacks:
  
  BallotBox::Manager.before_vote do |env, vote|
    vote.voter = env['warden'].user
    #vote.errors.add(:voter, :empty)
  end
  
  BallotBox::Manager.after_vote do |env, vote|
    Rails.logger.info(vote.to_xml)
  end
  
ActiveRecord callbacks:

  class Post < ActiveRecord::Base
    ballot_box :counter_cache => true
    
    before_vote :method_before
    after_vote :method_after
    
    def method_before
      Rails.logger.info current_vote.to_xml
      # To terminate register vote, just return false
      # return false
    end
    
    def method_after
      
    end
  end
